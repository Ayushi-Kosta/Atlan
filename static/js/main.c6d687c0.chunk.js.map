{"version":3,"sources":["App.js","index.js"],"names":["App","useState","columns","setColumns","data","setData","class","type","accept","onChange","e","file","target","files","reader","FileReader","onload","evt","bstr","result","wb","XLSX","wsname","SheetNames","ws","Sheets","dataString","dataStringLines","split","headers","list","i","length","row","obj","j","d","substring","Object","values","filter","x","push","map","c","name","selector","processData","sheet_to_csv","header","readAsBinaryString","pagination","highlightOnHover","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oSAqFeA,MAjFf,WAEE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KA4DA,OACE,yBAAKC,MAAM,aACT,2FACA,2BAAOA,MAAM,YACXC,KAAK,OACLC,OAAO,kBACPC,SAvBmB,SAAAC,GACvB,IAAMC,EAAOD,EAAEE,OAAOC,MAAM,GACtBC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACC,GAEf,IAAMC,EAAOD,EAAIL,OAAOO,OAClBC,EAAKC,OAAUH,EAAM,CAAEX,KAAM,WAE7Be,EAASF,EAAGG,WAAW,GACvBC,EAAKJ,EAAGK,OAAOH,IAjDL,SAAAI,GAKlB,IAJA,IAAMC,EAAkBD,EAAWE,MAAM,WACnCC,EAAUF,EAAgB,GAAGC,MAAM,uCAEnCE,EAAO,GACJC,EAAI,EAAGA,EAAIJ,EAAgBK,OAAQD,IAAK,CAC/C,IAAME,EAAMN,EAAgBI,GAAGH,MAAM,uCACrC,GAAIC,GAAWI,EAAID,QAAUH,EAAQG,OAAQ,CAE3C,IADA,IAAME,EAAM,GACHC,EAAI,EAAGA,EAAIN,EAAQG,OAAQG,IAAK,CACvC,IAAIC,EAAIH,EAAIE,GACRC,EAAEJ,OAAS,IACD,KAARI,EAAE,KACJA,EAAIA,EAAEC,UAAU,EAAGD,EAAEJ,OAAS,IACT,KAAnBI,EAAEA,EAAEJ,OAAS,KACfI,EAAIA,EAAEC,UAAUD,EAAEJ,OAAS,EAAG,KAE9BH,EAAQM,KACVD,EAAIL,EAAQM,IAAMC,GAKlBE,OAAOC,OAAOL,GAAKM,QAAO,SAAAC,GAAC,OAAIA,KAAGT,OAAS,GAC7CF,EAAKY,KAAKR,IAMhB,IAAMhC,EAAU2B,EAAQc,KAAI,SAAAC,GAAC,MAAK,CAChCC,KAAMD,EACNE,SAAUF,MAGZvC,EAAQyB,GACR3B,EAAWD,GAgBT6C,CADa1B,QAAW2B,aAAaxB,EAAI,CAAEyB,OAAQ,MAGrDnC,EAAOoC,mBAAmBvC,MAWxB,kBAAC,IAAD,CACEwC,YAAU,EACVC,kBAAgB,EAChBlD,QAASA,EACTE,KAAMA,MC1EdiD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.c6d687c0.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport * as XLSX from 'xlsx';\r\nimport DataTable from 'react-data-table-component';\r\n\r\nfunction App() {\r\n\r\n  const [columns, setColumns] = useState([]);\r\n  const [data, setData] = useState([]);\r\n\r\n  // process CSV data\r\n  const processData = dataString => {\r\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\r\n    const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\r\n\r\n    const list = [];\r\n    for (let i = 1; i < dataStringLines.length; i++) {\r\n      const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\r\n      if (headers && row.length == headers.length) {\r\n        const obj = {};\r\n        for (let j = 0; j < headers.length; j++) {\r\n          let d = row[j];\r\n          if (d.length > 0) {\r\n            if (d[0] == '\"')\r\n              d = d.substring(1, d.length - 1);\r\n            if (d[d.length - 1] == '\"')\r\n              d = d.substring(d.length - 2, 1);\r\n          }\r\n          if (headers[j]) {\r\n            obj[headers[j]] = d;\r\n          }\r\n        }\r\n\r\n        // remove the blank rows\r\n        if (Object.values(obj).filter(x => x).length > 0) {\r\n          list.push(obj);\r\n        }\r\n      }\r\n    }\r\n\r\n    // prepare columns list from headers\r\n    const columns = headers.map(c => ({\r\n      name: c,\r\n      selector: c,\r\n    }));\r\n\r\n    setData(list);\r\n    setColumns(columns);\r\n  }\r\n\r\n  // handle file upload\r\n  const handleFileUpload = e => {\r\n    const file = e.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.onload = (evt) => {\r\n      /* Parse data */\r\n      const bstr = evt.target.result;\r\n      const wb = XLSX.read(bstr, { type: 'binary' });\r\n      /* Get first worksheet */\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      /* Convert array of arrays */\r\n      const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n      processData(data);\r\n    };\r\n    reader.readAsBinaryString(file);\r\n  }\r\n\r\n  return (\r\n    <div class=\"input-div\">\r\n      <h3>Upload a csv or xlsv or xls file to display on the web page</h3>\r\n      <input class=\"input-btn\"\r\n        type=\"file\"\r\n        accept=\".csv,.xlsx,.xls\"\r\n        onChange={handleFileUpload}\r\n      />\r\n      <DataTable\r\n        pagination\r\n        highlightOnHover\r\n        columns={columns}\r\n        data={data}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}